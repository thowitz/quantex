#!/usr/bin/env python3

from platform import node
import click
from blockchain import BlockChain
from block import Block
from node import Node
from wallet import Wallet
from start import start as startProgram
from server import startServer
import sys
import os
from usefulFunctions import openFile
import threading
import time
import math


@click.group()
def main():
    click.echo("Starting")


@main.command()
def start():
    startProgram()
    global blockchain
    blockchain = BlockChain.getInstance()
    global node
    node = Node.getInstance()
    startMining()
    startServer()


@main.command()
@click.option("--create", is_flag=True)
@click.option("--print-keys", is_flag=True)
def wallet(create, print_keys):
    if create and print_keys:
        print("Please enter one flag")
        sys.exit()
    if create:
        createWallet()
    elif print_keys:
        decryptAndPrintKeys()


def startMining():
    miningThread = threading.Thread(target=mine)
    miningThread.start()


def mine():
    proofNumber = blockchain.mine(blockchain.lastBlock.proofNumber)
    lastBlock = blockchain.lastBlock()
    newBlockDict = {
        "index": lastBlock.index + 1,
        "previousBlockHash": lastBlock.blockHash,
        "transactionList": node.transactionPool,
        "timestamp": math.round(time.time()),
        "proofNumber": proofNumber,
    }
    newBlock = Block()
    newBlock.fromDict(newBlockDict)
    
    node.makeNetworkRequest("/block/new")


def createWallet():
    # I breifly saw somthing about click having user input functionality, so this is temporary
    privateKeyPassword = input("Please enter your private key password: ")

    wallet = Wallet.getInstance()

    # we only want to create and save a private key if the file does not exist, otherwise we could be overwriting an existing one
    if not os.path.isfile("private-key.json"):
        print("\nNo wallet found")
        print("Creating private key...")
        wallet.createPrivateKey()
        print("Done")
        print("Saving private key...")
        wallet.savePrivateKey(privateKeyPassword)
        print("Done")
    else:
        click.echo("\nA wallet already exists, the program will now exit")
        sys.exit()


def decryptAndPrintKeys():
    privateKeyPassword = input("Please enter your private key password: ")

    wallet = Wallet.getInstance()

    savedPrivateKeyData = openFile("private-key.json", True)
    if type(savedPrivateKeyData) != str:
        savedEncryptedPrivateKey = savedPrivateKeyData["encryptedPrivateKey"]
        decryptionResult = wallet.decryptPrivateKey(
            savedEncryptedPrivateKey, privateKeyPassword
        )
        if decryptionResult != str:
            print("\nPrivate key:")
            print(wallet.privateKey)
            print("\nPublic key:")
            print(wallet.calculatePublicKey())
        else:
            print(decryptionResult)
            sys.exit()
    else:
        print(savedPrivateKeyData)
        sys.exit()


main()
